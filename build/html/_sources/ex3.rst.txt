Лабораторная-работа-3
=====================

Цель работы
-----------

#. Изучение системных вызовов для обмена данными между процессами.
#. Приобретение навыков написания и трансляции системного ПО на языке C.
#. Изучение утилиты make и ее использование для трансляции программ на языке C.
#. Написать программу для обмена текстовыми сообщениями между процессами, с использованием механизма разделяемой памяти. 
#. Обеспечить синхронизацию обмена с помощью механизма семафоров.


Выполнение работы
-----------------

Для компиляции написанной программы был использован контейнер. Контейнер строится с использованием Dockerfile_.:

.. _Dockerfile: https://hub.docker.com/r/ravil/abc_linux_lab6/

Программы в процессе построения образа контейнера помещаются в файловую систему образа, производится ее сборка и установка (`исходные файлы`._).

.. _исходные файлы: https://github.com/Ishkinin/abc_Linux_labs/tree/master/lab6/src

Для демонстрации работы программы контейнер используется команда:

.. code-block:: bash
   :emphasize-lines: 1

   docker run -it --rm ravil/abc_linux_lab6

Следом после этого запускается скрипт._:

.. _скрипт: https://github.com/Ishkinin/abc_Linux_labs/blob/master/lab6/lab6.sh

Скрипт запускает программу-сервер lab6-server и несколько раз отправляет сообщения серверу с помощью утилиты lab6-client. Сервер останавливает свое выполнение после получения пяти сообщений. После остановки сервера можно видеть уведомление от lab6-client о том, что сервер не запущен.

Результат выполнеия:

.. image:: lab6.png
   :scale: 90 %
   :alt: результат выполнения программы
   :align: center

Выводы
------

#. благодаря технологии контейнеров имеется возможность запуска процессов в изолированном окружении абсолютно под разными операционными системами.
#. Для того, чтобы реализовать механизм разделяемой памяти, стоить применять например  высосокоуровневую библиотеку 0mq для Go.  

